; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; No nrepl port file found.
; Connecting using "Tyba" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:51832 ...
; Hooking up nREPL sessions ...
; nREPL connection failed: AggregateError
; Failed connecting.
; Connecting using "Tyba" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:51832 ...
; Hooking up nREPL sessions ...
; nREPL connection failed: AggregateError
; Failed connecting.
; Connecting using "Tyba" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:51832 ...
; Hooking up nREPL sessions ...
; nREPL connection failed: AggregateError
; Failed connecting.
; Connecting using "Tyba" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:52165 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉user꞉> 
; Creating cljs repl session...
; Connecting cljs repl: Tyba...
; Error while connecting cljs REPL: EntryNotFound (FileSystemError): Error: ENOENT: no such file or directory, open '/Users/jarrett/code/personal/vu1-driver-clojure/shadow-cljs.edn'
; nREPL Connection was closed
; Connecting using "Tyba" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:52227 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉user꞉> 
; Creating cljs repl session...
; Connecting cljs repl: Tyba...
; Error while connecting cljs REPL: EntryNotFound (FileSystemError): Error: ENOENT: no such file or directory, open '/Users/jarrett/code/personal/vu1-driver-clojure/shadow-cljs.edn'
; Connecting using "Generic .nrepl-port (no cljs)" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:52227 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; nREPL Connection was closed
; Connecting using "Generic .nrepl-port (no cljs)" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:53115 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉user꞉> 
; Evaluating file: thing.clj
; 
; ; clj  dev.freeformsoftware.vu1-driver-clojure.thing 
; WARNING: key already refers to: #'clojure.core/key in namespace: dev.freeformsoftware.vu1-driver-clojure.thing, being replaced by: #'dev.freeformsoftware.vu1-driver-clojure.thing/key
; 
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
; Evaluation of file thing.clj failed: class clojure.lang.Compiler$CompilerException
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 50
                   :key   key}})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 50
                   :key   key}})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 50
                   :key   key}})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 50
                   :key   key}})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
"http://localhost:5340/api/v0/840033000650564139323920/set"
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn make-v0-dial-path-prefix
  [{:keys [dial-uid extended-path] :as params}]
  (str (make-v0-path-prefix params) "dial/" dial-uid extended-path))
#'dev.freeformsoftware.vu1-driver-clojure.thing/make-v0-dial-path-prefix
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
"http://localhost:5340/api/v0/dial/840033000650564139323920/set"
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 50
                   :key   key}})
{:cached nil,
 :request-time 6,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x11323e53 "org.apache.http.impl.client.InternalHttpClient@11323e53"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:18:31 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body "{\"status\": \"ok\", \"message\": \"Update queued\", \"data\": null}",
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}})
{:cached nil,
 :request-time 6,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x5b48accb "org.apache.http.impl.client.InternalHttpClient@5b48accb"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:18:41 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body "{\"status\": \"ok\", \"message\": \"Update queued\", \"data\": null}",
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (client/get
     (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                :extended-path "/set"})
     {:query-params {:value value
                     :key   key}})
    (delay 500))
; Execution error (ArityException) at nrepl.middleware.interruptible-eval/evaluate$fn$fn (interruptible_eval.clj:102).
; Wrong number of args (3) passed to: clojure.core/for
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
  (do
    (client/get
     (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                :extended-path "/set"})
     {:query-params {:value value
                     :key   key}})
    (delay 500)))
(#<Delay@72f94a6d: :not-delivered>
 #<Delay@7f769c4d: :not-delivered>
 #<Delay@6e5d0fc6: :not-delivered>
 #<Delay@5586dc87: :not-delivered>
 #<Delay@5f6ae707: :not-delivered>
 #<Delay@290c6294: :not-delivered>)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      @(client/get
        (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                   :extended-path "/set"})
        {:query-params {:value value
                        :key   key}})
      (Thread/sleep 500)))
; Error printing return value (ClassCastException) at clojure.core/deref-future (core.clj:2315).
; class clojure.lang.PersistentHashMap cannot be cast to class java.util.concurrent.Future (clojure.lang.PersistentHashMap is in unnamed module of loader 'app'; java.util.concurrent.Future is in module java.base of loader 'bootstrap')
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (client/get
        (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                   :extended-path "/set"})
        {:query-params {:value value
                        :key   key}})
      (Thread/sleep 500)))
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (client/get
        (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                   :extended-path "/set"})
        {:query-params {:value value
                        :key   key}})
      (Thread/sleep 1000)))
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (client/get
        (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                   :extended-path "/set"})
        {:query-params {:value value
                        :key   key}})
      (Thread/sleep 1000)))
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(ns dev.freeformsoftware.vu1-driver-clojure.thing
  (:require
   [clj-http.client :as client]
   [clojure.set :as set]))
nil
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input   #{::value}
    ::output  #{}
    ::execute (fn [params])}
   {::input   #{}
    ::output  #{::status}
    ::execute (fn [params])}
   {::input   #{}
    ::output  #{::not-me}
    ::execute (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs {::value 1} ::outputs [::status]})
; Syntax error compiling at (src/main/dev/freeformsoftware/vu1_driver_clojure/thing.clj:60:3).
; Unable to resolve symbol: execute! in this context
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn execute!
  [{::keys [inputs outputs] :as params}]
  (let [inputs-set  (set (keys inputs))
        outputs-set (set outputs)
        api-paths   (filter (fn [x]
                              (or (seq (set/intersection inputs-set (::input x)))
                                  (seq (set/intersection outputs-set (::output x)))))
                            dial-api-paths)]
    api-paths))
#'dev.freeformsoftware.vu1-driver-clojure.thing/execute!
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs {::value 1} ::outputs [::status]})
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value},
                                                 :output #{},
                                                 :execute
                                                 #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--14714]}
 #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{},
                                                 :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status},
                                                 :execute
                                                 #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--14716]})
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs {} ::outputs [::status]})
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{},
                                                 :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status},
                                                 :execute
                                                 #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--14716]})
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 401
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
"http://localhost:5340/api/v0/dial/840033000650564139323920/set"
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (client/get
       (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                  :extended-path "/set"})
       {:query-params {:value value
                       :key   key}})
      (Thread/sleep 1000)))
; Error printing return value (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 401
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (client/get
       (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                  :extended-path "/set"})
       {:query-params {:value value
                       :key   key}})
      (Thread/sleep 1000)))
; Error printing return value (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 401
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def key "cTpAWYuRpA2zx75Yh961Cg ")
#'dev.freeformsoftware.vu1-driver-clojure.thing/key
; 
; WARNING: key already refers to: #'clojure.core/key in namespace: dev.freeformsoftware.vu1-driver-clojure.thing, being replaced by: #'dev.freeformsoftware.vu1-driver-clojure.thing/key
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def key "cTpAWYuRpA2zx75Yh961Cg")
#'dev.freeformsoftware.vu1-driver-clojure.thing/key
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (client/get
       (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                                  :extended-path "/set"})
       {:query-params {:value value
                       :key   key}})
      (Thread/sleep 1000)))
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}})
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
{:cached nil,
 :request-time 8,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x70f65bc8 "org.apache.http.impl.client.InternalHttpClient@70f65bc8"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:31:30 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body "{\"status\": \"ok\", \"message\": \"Update queued\", \"data\": null}",
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}
    :as :json})
; Execution error (AssertionError) at clj-http.client/coerce-json-body (client.clj:468).
; Assert failed: json-enabled?
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}
    :accept :json})
{:cached nil,
 :request-time 5,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0xf3c7c8b "org.apache.http.impl.client.InternalHttpClient@f3c7c8b"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:32:08 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body "{\"status\": \"ok\", \"message\": \"Update queued\", \"data\": null}",
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
; nREPL Connection was closed
; Connecting using "Generic .nrepl-port (no cljs)" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/jarrett/code/personal/vu1-driver-clojure/.nrepl-port ...
; Using host:port localhost:54248 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉user꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}
    :accept :json})
; Syntax error compiling at (src/main/dev/freeformsoftware/vu1_driver_clojure/thing.clj:49:4).
; Unable to resolve symbol: make-v0-dial-path-prefix in this context
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
; Evaluating file: thing.clj
; 
; ; clj  dev.freeformsoftware.vu1-driver-clojure.thing 
; WARNING: key already refers to: #'clojure.core/key in namespace: dev.freeformsoftware.vu1-driver-clojure.thing, being replaced by: #'dev.freeformsoftware.vu1-driver-clojure.thing/key
nil
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   key}
    :accept :json})
{:cached nil,
 :request-time 72,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x77f90c1e "org.apache.http.impl.client.InternalHttpClient@77f90c1e"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:33:20 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body "{\"status\": \"ok\", \"message\": \"Update queued\", \"data\": null}",
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   api-key}
    :accept :json})
; Syntax error compiling at (src/main/dev/freeformsoftware/vu1_driver_clojure/thing.clj:48:3).
; Unable to resolve symbol: api-key in this context
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def api-key "cTpAWYuRpA2zx75Yh961Cg")
#'dev.freeformsoftware.vu1-driver-clojure.thing/api-key
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   api-key}
    :accept :json})
{:cached nil,
 :request-time 7,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x491e38f4 "org.apache.http.impl.client.InternalHttpClient@491e38f4"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:33:47 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body "{\"status\": \"ok\", \"message\": \"Update queued\", \"data\": null}",
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/set"})
   {:query-params {:value 90
                   :key   api-key}
    :as :json})
{:cached nil,
 :request-time 4,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x5919b88 "org.apache.http.impl.client.InternalHttpClient@5919b88"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:34:28 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"6c996b5f2c586579b6b3907eb3bf3c356b2a8782\"",
  "Content-Length" "58",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 58,
 :body {:status "ok", :message "Update queued", :data nil},
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(client/get
   (make-v0-dial-path-prefix {:dial-uid      "840033000650564139323920"
                              :extended-path "/status"})
   {:query-params {
                   :key   api-key}
    :as           :json})
{:cached nil,
 :request-time 8,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x53ca2b7d "org.apache.http.impl.client.InternalHttpClient@53ca2b7d"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:38:07 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"b027a11a448f11e202a46cbb8959577abbe60888\"",
  "Content-Length" "514",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 514,
 :body
 {:status "ok",
  :message "",
  :data
  {:rgbw [0 0 0 0],
   :value_changed false,
   :backlight {:red 0, :green 0, :blue 0},
   :backlight_changed false,
   :index "0",
   :hw_version "?",
   :fw_hash "?",
   :dial_name "L-ref-1",
   :uid "840033000650564139323920",
   :image_file "img_blank",
   :value 90,
   :easing {:dial_step 20, :dial_period 50, :backlight_step 20, :backlight_period "50"},
   :update_deadline 1.722144700252102E9,
   :image_changed false,
   :fw_version "?",
   :protocol_version "V1"}},
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (:api-key params)
                                   :value (::value params)}})))}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/status"))
                   {:query-params {:key (:api-key params)}})))}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
; Syntax error compiling at (src/main/dev/freeformsoftware/vu1_driver_clojure/thing.clj:27:18).
; Unable to resolve symbol: die-if-status-bad! in this context
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn die-if-status-bad!
  [request-result]
  (assert (= "ok" (get-in request-result [:body :status])))
  {})
#'dev.freeformsoftware.vu1-driver-clojure.thing/die-if-status-bad!
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (:api-key params)
                                   :value (::value params)}})))}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/status"))
                   {:query-params {:key (:api-key params)}})))}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs {} ::outputs [::status]})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 404
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn make-v0-dial-path-prefix
  [{::keys [dial-uid extended-path] :as params}]
  (assert dial-uid)
  (assert extended-path)
  (str (make-v0-path-prefix params) "dial/" dial-uid extended-path))
#'dev.freeformsoftware.vu1-driver-clojure.thing/make-v0-dial-path-prefix
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; Execution error (AssertionError) at dev.freeformsoftware.vu1-driver-clojure.thing/die-if-status-bad! (user.clj:20).
; Assert failed: (= "ok" (get-in request-result [:body :status]))
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn die-if-status-bad!
  [request-result]
  (assert (= "ok" (get-in request-result [:body :status]))
          (str "Improper request result! " request-result))
  {})
#'dev.freeformsoftware.vu1-driver-clojure.thing/die-if-status-bad!
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; Execution error (AssertionError) at dev.freeformsoftware.vu1-driver-clojure.thing/die-if-status-bad! (user.clj:22).
; Assert failed: Improper request result! {:cached nil, :request-time 10, :repeatable? false, :protocol-version {:name "HTTP", :major 1, :minor 1}, :streaming? true, :http-client #object[org.apache.http.impl.client.InternalHttpClient 0x330c61b8 "org.apache.http.impl.client.InternalHttpClient@330c61b8"], :chunked? false, :reason-phrase "OK", :headers {"Server" "TornadoServer/6.4.1", "Content-Type" "application/json; charset=UTF-8", "Date" "Sun, 28 Jul 2024 05:42:45 GMT", "Access-Control-Allow-Origin" "*", "Access-Control-Allow-Methods" "POST, GET", "Etag" "\"b027a11a448f11e202a46cbb8959577abbe60888\"", "Content-Length" "514", "Connection" "close"}, :orig-content-encoding nil, :status 200, :length 514, :body "{\"status\": \"ok\", \"message\": \"\", \"data\": {\"index\": \"0\", \"uid\": \"840033000650564139323920\", \"dial_name\": \"L-ref-1\", \"value\": 90, \"rgbw\": [0, 0, 0, 0], \"easing\": {\"dia
; l_step\": 20, \"dial_period\": 50, \"backlight_step\": 20, \"backlight_period\": \"50\"}, \"fw_hash\": \"?\", \"fw_version\": \"?\", \"hw_version\": \"?\", \"protocol_version\": \"V1\", \"backlight\": {\"red\": 0, \"green\": 0, \"blue\": 0}, \"image_file\": \"img_blank\", \"update_deadline\": 1722144700.252102, \"value_changed\": false, \"backlight_changed\": false, \"image_changed\": false}}", :trace-redirects []}
; (= "ok" (get-in request-result [:body :status]))
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (:api-key params)
                                   :value (::value params)}
                    :as :json})))}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/status"))
                   {:query-params {:key (:api-key params)}
                    :as :json})))}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn execute!
  [{::keys [input outputs] :as params}]
  (let [input-set   (set (keys input))
        outputs-set (set outputs)
        api-paths   (filter (fn [x]
                              (or (seq (set/intersection input-set (::input x)))
                                  (seq (set/intersection outputs-set (::output x)))))
                            dial-api-paths)]
    (println api-paths)
    (reduce (fn [acc {::keys [execute!]}]
              (merge acc (execute! params)))
            {}
            api-paths)))
#'dev.freeformsoftware.vu1-driver-clojure.thing/execute!
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15243]})
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn die-if-status-bad!
  [request-result]
  (assert (= "ok" (get-in request-result [:body :status]))
          (str "Improper request result! " request-result))
  request-result)
#'dev.freeformsoftware.vu1-driver-clojure.thing/die-if-status-bad!
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (:api-key params)
                                   :value (::value params)}
                    :as :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/status"))
                   {:query-params {:key (:api-key params)}
                    :as :json})))}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15264]})
{:cached nil,
 :request-time 6,
 :repeatable? false,
 :protocol-version {:name "HTTP", :major 1, :minor 1},
 :streaming? true,
 :http-client
 #object[org.apache.http.impl.client.InternalHttpClient 0x3784340e "org.apache.http.impl.client.InternalHttpClient@3784340e"],
 :chunked? false,
 :reason-phrase "OK",
 :headers
 {"Server" "TornadoServer/6.4.1",
  "Content-Type" "application/json; charset=UTF-8",
  "Date" "Sun, 28 Jul 2024 05:44:23 GMT",
  "Access-Control-Allow-Origin" "*",
  "Access-Control-Allow-Methods" "POST, GET",
  "Etag" "\"b027a11a448f11e202a46cbb8959577abbe60888\"",
  "Content-Length" "514",
  "Connection" "close"},
 :orig-content-encoding nil,
 :status 200,
 :length 514,
 :body
 {:status "ok",
  :message "",
  :data
  {:rgbw [0 0 0 0],
   :value_changed false,
   :backlight {:red 0, :green 0, :blue 0},
   :backlight_changed false,
   :index "0",
   :hw_version "?",
   :fw_hash "?",
   :dial_name "L-ref-1",
   :uid "840033000650564139323920",
   :image_file "img_blank",
   :value 90,
   :easing {:dial_step 20, :dial_period 50, :backlight_step 20, :backlight_period "50"},
   :update_deadline 1.722144700252102E9,
   :image_changed false,
   :fw_version "?",
   :protocol_version "V1"}},
 :trace-redirects []}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (:api-key params)
                                   :value (::value params)}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 (-> (client/get
                      (make-v0-dial-path-prefix
                       (assoc params ::extended-path "/status"))
                      {:query-params {:key (:api-key params)}
                       :as           :json})
                     (die-if-status-bad!)
                     (get-in [:body :data])))}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15272]})
{:rgbw [0 0 0 0],
 :value_changed false,
 :backlight {:red 0, :green 0, :blue 0},
 :backlight_changed false,
 :index "0",
 :hw_version "?",
 :fw_hash "?",
 :dial_name "L-ref-1",
 :uid "840033000650564139323920",
 :image_file "img_blank",
 :value 90,
 :easing {:dial_step 20, :dial_period 50, :backlight_step 20, :backlight_period "50"},
 :update_deadline 1.722144700252102E9,
 :image_changed false,
 :fw_version "?",
 :protocol_version "V1"}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (:api-key params)
                                   :value (::value params)}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (:api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15280]})
#:dev.freeformsoftware.vu1-driver-clojure.thing{:status
                                                {:rgbw [0 0 0 0],
                                                 :value_changed false,
                                                 :backlight {:red 0, :green 0, :blue 0},
                                                 :backlight_changed false,
                                                 :index "0",
                                                 :hw_version "?",
                                                 :fw_hash "?",
                                                 :dial_name "L-ref-1",
                                                 :uid "840033000650564139323920",
                                                 :image_file "img_blank",
                                                 :value 90,
                                                 :easing
                                                 {:dial_step 20,
                                                  :dial_period 50,
                                                  :backlight_step 20,
                                                  :backlight_period "50"},
                                                 :update_deadline 1.722144700252102E9,
                                                 :image_changed false,
                                                 :fw_version "?",
                                                 :protocol_version "V1"}}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::inputs   {::value value}
                 ::dial-uid "840033000650564139323920"})
      (Thread/sleep 1000)))
()
()
()
()
()
()
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {::value 8}
             ::dial-uid "840033000650564139323920"})
; ()
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {::value 8}
             ::dial-uid "840033000650564139323920"})
; ()
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {::value 8}
             ::dial-uid "840033000650564139323920"})
; ()
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {::value 8}
             ::dial-uid "840033000650564139323920"})
; ()
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(require 'jarrett.development) (jarrett.development/start-portal!)
; Syntax error (ClassNotFoundException) compiling at (jarrett/development.clj:53:3).
; jarrett.tyba
; 
; Execution error (ClassNotFoundException) at java.net.URLClassLoader/findClass (URLClassLoader.java:445).
; jarrett.development
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(defn execute!
  [{::keys [input outputs] :as params}]
  (let [input-set   (set (keys input))
        outputs-set (set outputs)
        api-paths   (filter (fn [x]
                              (or (seq (set/intersection input-set (::input x)))
                                  (seq (set/intersection outputs-set (::output x)))))
                            dial-api-paths)]
    (println api-paths input-set)
    (reduce (fn [acc {::keys [execute!]}]
              (merge acc (execute! params)))
            {}
            api-paths)))
#'dev.freeformsoftware.vu1-driver-clojure.thing/execute!
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {::value 8}
             ::dial-uid "840033000650564139323920"})
; () #{}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input   {::value 8}
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15278]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 401
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 8}
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15278]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 401
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15280]}) #{}
#:dev.freeformsoftware.vu1-driver-clojure.thing{:status
                                                {:rgbw [0 0 0 0],
                                                 :value_changed false,
                                                 :backlight {:red 0, :green 0, :blue 0},
                                                 :backlight_changed false,
                                                 :index "0",
                                                 :hw_version "?",
                                                 :fw_hash "?",
                                                 :dial_name "L-ref-1",
                                                 :uid "840033000650564139323920",
                                                 :image_file "img_blank",
                                                 :value 90,
                                                 :easing
                                                 {:dial_step 20,
                                                  :dial_period 50,
                                                  :backlight_step 20,
                                                  :backlight_period "50"},
                                                 :update_deadline 1.722144700252102E9,
                                                 :image_changed false,
                                                 :fw_version "?",
                                                 :protocol_version "V1"}}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15280]}) #{}
#:dev.freeformsoftware.vu1-driver-clojure.thing{:status
                                                {:rgbw [0 0 0 0],
                                                 :value_changed false,
                                                 :backlight {:red 0, :green 0, :blue 0},
                                                 :backlight_changed false,
                                                 :index "0",
                                                 :hw_version "?",
                                                 :fw_hash "?",
                                                 :dial_name "L-ref-1",
                                                 :uid "840033000650564139323920",
                                                 :image_file "img_blank",
                                                 :value 90,
                                                 :easing
                                                 {:dial_step 20,
                                                  :dial_period 50,
                                                  :backlight_step 20,
                                                  :backlight_period "50"},
                                                 :update_deadline 1.722144700252102E9,
                                                 :image_changed false,
                                                 :fw_version "?",
                                                 :protocol_version "V1"}}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 8}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15278]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 401
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (::value params)}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 8}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15364]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 8}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 8}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 8}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 80}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::input    {::value 80}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::input    {::value value}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 8}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 57}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 33}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 86}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 99}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15372]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 1}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status]
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15374]}) #{}
#:dev.freeformsoftware.vu1-driver-clojure.thing{:status
                                                {:rgbw [0 0 0 0],
                                                 :value_changed false,
                                                 :backlight {:red 0, :green 0, :blue 0},
                                                 :backlight_changed false,
                                                 :index "0",
                                                 :hw_version "?",
                                                 :fw_hash "?",
                                                 :dial_name "L-ref-1",
                                                 :uid "840033000650564139323920",
                                                 :image_file "img_blank",
                                                 :value 1,
                                                 :easing
                                                 {:dial_step 20,
                                                  :dial_period 50,
                                                  :backlight_step 20,
                                                  :backlight_period "50"},
                                                 :update_deadline 1.722145822059001E9,
                                                 :image_changed false,
                                                 :fw_version "?",
                                                 :protocol_version "V1"}}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/name"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}

   {::input    #{::name}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::name])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}

   {::input    #{::name}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/name"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::name])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 80
                         ::name  "L-ref-100000"}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15424]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15428]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80, :name L-ref-100000}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 80, :name L-ref-100000}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 406
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
slingshot.support/stack-trace (support.clj:201)
clj-http.client/exceptions-response (client.clj:248)
clj-http.client/exceptions-response (client.clj:239)
clj-http.client/wrap-exceptions (client.clj:257)
clj-http.client/wrap-accept (client.clj:762)
clj-http.client/wrap-accept-encoding (client.clj:784)
clj-http.client/wrap-content-type (client.clj:745)
clj-http.client/wrap-form-params (client.clj:993)
clj-http.client/wrap-nested-params (client.clj:1027)
clj-http.client/wrap-flatten-nested-params (client.clj:1051)
clj-http.client/wrap-method (client.clj:927)
clj-http.cookies/wrap-cookies (cookies.clj:128)
clj-http.links/wrap-links (links.clj:63)
clj-http.client/wrap-unknown-host (client.clj:1080)
clj-http.client/request* (client.clj:1208)
clj-http.client/request* (client.clj:1201)
clj-http.client/get (client.clj:1214)
clj-http.client/get (client.clj:1210)
dev.freeformsoftware.vu1-driver-clojure.thing/fn (user.clj:55)
dev.freeformsoftware.vu1-driver-clojure.thing/fn (user.clj:52)
dev.freeformsoftware.vu1-driver-clojure.thing/execute! (user.clj:62)
clojure.lang.ArrayChunk/reduce (ArrayChunk.java:63)
clojure.core.protocols/fn (protocols.clj:136)
clojure.core.protocols/fn (protocols.clj:124)
clojure.core.protocols/fn (protocols.clj:19)
clojure.core.protocols/seq-reduce (protocols.clj:31)
clojure.core.protocols/fn (protocols.clj:75)
clojure.core.protocols/fn (protocols.clj:13)
clojure.core/reduce (core.clj:6886)
clojure.core/reduce (core.clj:6868)
dev.freeformsoftware.vu1-driver-clojure.thing/execute! (user.clj:61)
dev.freeformsoftware.vu1-driver-clojure.thing/execute! (user.clj:52)
dev.freeformsoftware.vu1-driver-clojure.thing/eval15432 (user.clj:91)
clojure.lang.Compiler/eval (Compiler.java:7194)
clojure.core/eval (core.clj:3215)
clojure.core/eval (core.clj:3211)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:102)
clojure.core/apply (core.clj:667)
clojure.core/with-bindings* (core.clj:1990)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:102)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:99)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:71)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:166)
nrepl.middleware.session/session-exec (session.clj:236)
nrepl.middleware.session/session-exec (session.clj:235)
java.lang.Thread/run (Thread.java:1583)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {
                         ::name  "L-ref-100000"}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15428]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:name L-ref-100000}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 406
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
slingshot.support/stack-trace (support.clj:201)
clj-http.client/exceptions-response (client.clj:248)
clj-http.client/exceptions-response (client.clj:239)
clj-http.client/wrap-exceptions (client.clj:257)
clj-http.client/wrap-accept (client.clj:762)
clj-http.client/wrap-accept-encoding (client.clj:784)
clj-http.client/wrap-content-type (client.clj:745)
clj-http.client/wrap-form-params (client.clj:993)
clj-http.client/wrap-nested-params (client.clj:1027)
clj-http.client/wrap-flatten-nested-params (client.clj:1051)
clj-http.client/wrap-method (client.clj:927)
clj-http.cookies/wrap-cookies (cookies.clj:128)
clj-http.links/wrap-links (links.clj:63)
clj-http.client/wrap-unknown-host (client.clj:1080)
clj-http.client/request* (client.clj:1208)
clj-http.client/request* (client.clj:1201)
clj-http.client/get (client.clj:1214)
clj-http.client/get (client.clj:1210)
dev.freeformsoftware.vu1-driver-clojure.thing/fn (user.clj:55)
dev.freeformsoftware.vu1-driver-clojure.thing/fn (user.clj:52)
dev.freeformsoftware.vu1-driver-clojure.thing/execute! (user.clj:62)
clojure.lang.ArrayChunk/reduce (ArrayChunk.java:58)
clojure.core.protocols/fn (protocols.clj:136)
clojure.core.protocols/fn (protocols.clj:124)
clojure.core.protocols/fn (protocols.clj:19)
clojure.core.protocols/seq-reduce (protocols.clj:31)
clojure.core.protocols/fn (protocols.clj:75)
clojure.core.protocols/fn (protocols.clj:13)
clojure.core/reduce (core.clj:6886)
clojure.core/reduce (core.clj:6868)
dev.freeformsoftware.vu1-driver-clojure.thing/execute! (user.clj:61)
dev.freeformsoftware.vu1-driver-clojure.thing/execute! (user.clj:52)
dev.freeformsoftware.vu1-driver-clojure.thing/eval15434 (user.clj:91)
clojure.lang.Compiler/eval (Compiler.java:7194)
clojure.core/eval (core.clj:3215)
clojure.core/eval (core.clj:3211)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:102)
clojure.core/apply (core.clj:667)
clojure.core/with-bindings* (core.clj:1990)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:102)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:458)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:99)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:71)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:166)
nrepl.middleware.session/session-exec (session.clj:236)
nrepl.middleware.session/session-exec (session.clj:235)
java.lang.Thread/run (Thread.java:1583)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}

   {::input    #{::name}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/name"))
                   {:query-params {:key   (::api-key params)
                                   :name (get-in params [::input ::name])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {
                         ::name  "L-ref-100000"}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15440]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:name L-ref-100000}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 44
                         ::name  "L-ref-1"}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15436]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15440]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}

   {::input    #{::name}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/name"))
                   {:query-params {:key  (::api-key params)
                                   :name (get-in params [::input ::name])}
                    :as           :json}))
                 {})}
   {::input    #{::background-color}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/backlight"))
                   {:query-params {:key   (::api-key params)
                                   :red   (get-in params [::input ::background-color 0] 0)
                                   :green (get-in params [::input ::background-color 1] 0)
                                   :blue  (get-in params [::input ::background-color 2] 0)
                                   :white  (get-in params [::input ::background-color 3] 0)}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 44
                         ::name  "L-ref-1"
                         ::background-color [8 77 12 0]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15448]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15452]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15454]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1, :background-color [8 77 12 0]}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 44
                         ::name  "L-ref-1"
                         ::background-color [8 77 12 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15448]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15452]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15454]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1, :background-color [8 77 12 255]}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 44
                         ::name  "L-ref-1"
                         ::background-color [8 0 0 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15448]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15452]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15454]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1, :background-color [8 0 0 255]}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 44
                         ::name  "L-ref-1"
                         ::background-color [255 255 0 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15448]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15452]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15454]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1, :background-color [255 255 0 255]}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value 44
                         ::name  "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15448]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15452]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15454]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
; Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 44, :name L-ref-1, :background-color [255 255 255 255]}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (println "Running /set" params)
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}

   {::input    #{::name}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/name"))
                   {:query-params {:key  (::api-key params)
                                   :name (get-in params [::input ::name])}
                    :as           :json}))
                 {})}
   {::input    #{::background-color}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/backlight"))
                   {:query-params {:key   (::api-key params)
                                   :red   (get-in params [::input ::background-color 0] 0)
                                   :green (get-in params [::input ::background-color 1] 0)
                                   :blue  (get-in params [::input ::background-color 2] 0)
                                   :white (get-in params [::input ::background-color 3] 0)}
                    :as           :json}))
                 {})}
   {::input    #{::dial-easing}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/easing/dial"))
                   {:query-params {:key    (::api-key params)
                                   :step   (get-in params [::input ::dial-easing :step])
                                   :period (get-in params [::input ::dial-easing :period])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step 30
                                        :period 80}
                         }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15476]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step 30
                                        :period 800}
                         }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15476]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::input    {::value value}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 8}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 57}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 33}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 86}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 99}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 1}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step 30
                                        :period 80}
                         }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15476]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step 30
                                        :period 800}
                         }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15476]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::input    {::value value}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 8}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 57}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 33}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 86}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 99}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15468]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
Running /set #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #:dev.freeformsoftware.vu1-driver-clojure.thing{:value 1}, :dial-uid 840033000650564139323920, :api-key cTpAWYuRpA2zx75Yh961Cg}
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status ::easing-config]
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15470]}) #{}
#:dev.freeformsoftware.vu1-driver-clojure.thing{:status
                                                {:rgbw [100 100 100 100],
                                                 :value_changed false,
                                                 :backlight {:red 100, :green 100, :blue 100, :white 100},
                                                 :backlight_changed false,
                                                 :index "0",
                                                 :hw_version "?",
                                                 :fw_hash "?",
                                                 :dial_name "L-ref-1",
                                                 :uid "840033000650564139323920",
                                                 :image_file "img_blank",
                                                 :value 1,
                                                 :easing
                                                 {:dial_step 30,
                                                  :dial_period 800,
                                                  :backlight_step 20,
                                                  :backlight_period "50"},
                                                 :update_deadline 1.722146748846205E9,
                                                 :image_changed false,
                                                 :fw_version "?",
                                                 :protocol_version "V1"}}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(def dial-api-paths
  [{::input    #{::value}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/set"))
                   {:query-params {:key   (::api-key params)
                                   :value (get-in params [::input ::value])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::status}
    ::execute! (fn [params]
                 {::status (-> (client/get
                                (make-v0-dial-path-prefix
                                 (assoc params ::extended-path "/status"))
                                {:query-params {:key (::api-key params)}
                                 :as           :json})
                               (die-if-status-bad!)
                               (get-in [:body :data]))})}

   {::input    #{::name}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/name"))
                   {:query-params {:key  (::api-key params)
                                   :name (get-in params [::input ::name])}
                    :as           :json}))
                 {})}
   {::input    #{::background-color}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/backlight"))
                   {:query-params {:key   (::api-key params)
                                   :red   (get-in params [::input ::background-color 0] 0)
                                   :green (get-in params [::input ::background-color 1] 0)
                                   :blue  (get-in params [::input ::background-color 2] 0)
                                   :white (get-in params [::input ::background-color 3] 0)}
                    :as           :json}))
                 {})}
   {::input    #{::dial-easing}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/easing/dial"))
                   {:query-params {:key    (::api-key params)
                                   :step   (get-in params [::input ::dial-easing :step])
                                   :period (get-in params [::input ::dial-easing :period])}
                    :as           :json}))
                 {})}
   {::input    #{::backlight-easing}
    ::output   #{}
    ::execute! (fn [params]
                 (die-if-status-bad!
                  (client/get
                   (make-v0-dial-path-prefix
                    (assoc params ::extended-path "/easing/backlight"))
                   {:query-params {:key    (::api-key params)
                                   :step   (get-in params [::input ::backlight-easing :step])
                                   :period (get-in params [::input ::backlight-easing :period])}
                    :as           :json}))
                 {})}
   {::input    #{}
    ::output   #{::easing-config}
    ::execute! (fn [params]
                 {::easing-config (-> (client/get
                                       (make-v0-dial-path-prefix
                                        (assoc params ::extended-path "/easing/get"))
                                       {:query-params {:key (::api-key params)}
                                        :as           :json})
                                      (die-if-status-bad!)
                                      (get-in [:body :data]))})}
   {::input    #{}
    ::output   #{::not-me}
    ::execute! (fn [params])}])
#'dev.freeformsoftware.vu1-driver-clojure.thing/dial-api-paths
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::inputs   {}
             ::outputs  [::status ::easing-config]
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/status}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15524]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{}, :output #{:dev.freeformsoftware.vu1-driver-clojure.thing/easing-config}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15534]}) #{}
#:dev.freeformsoftware.vu1-driver-clojure.thing{:status
                                                {:rgbw [100 100 100 100],
                                                 :value_changed false,
                                                 :backlight {:red 100, :green 100, :blue 100, :white 100},
                                                 :backlight_changed false,
                                                 :index "0",
                                                 :hw_version "?",
                                                 :fw_hash "?",
                                                 :dial_name "L-ref-1",
                                                 :uid "840033000650564139323920",
                                                 :image_file "img_blank",
                                                 :value 1,
                                                 :easing
                                                 {:dial_step 30,
                                                  :dial_period 800,
                                                  :backlight_step 20,
                                                  :backlight_period "50"},
                                                 :update_deadline 1.722146748846205E9,
                                                 :image_changed false,
                                                 :fw_version "?",
                                                 :protocol_version "V1"},
                                                :easing-config nil}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]]]
    (do
      (execute! {::input    {::value            value
                             ::background-color background}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step   20
                                        :period 50}
                        }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15530]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]]]
    (do
      (execute! {::input    {::value            value
                             ::background-color background}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (execute! {::input    {::value            value
                             ::background-color background}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (execute! {::input    {::value            value
                             ::background-color background}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1500)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (execute! {::input    {::value            value
                             ::background-color background}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1500)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (execute! {::input    {::value            value
                             ::background-color background}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1500)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (for [uid ["840033000650564139323920"
                 "400028000650564139323920"
                 "8C002B000650564139323920"
                 "490026000650564139323920"]]
        (execute! {::input    {::value            value
                               ::background-color background}
                   ::dial-uid uid
                   ::api-key  api-key}))
      (Thread/sleep 1500)))
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (doall (for [uid ["840033000650564139323920"
                        "400028000650564139323920"
                        "8C002B000650564139323920"
                        "490026000650564139323920"]]
               (execute! {::input    {::value            value
                                      ::background-color background}
                          ::dial-uid uid
                          ::api-key  api-key})))
      (Thread/sleep 1500)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [[value background] [[8 [255 255 255]]
                            [57 [255 0 0]]
                            [44 [255 255 0]]
                            [99 [255 255 255]]
                            [1 [0 255 255]]
                            [50 [0 0 255]]
                            [50 [0 0 0]]]]
    (do
      (doall (for [uid ["840033000650564139323920"
                        "400028000650564139323920"
                        "8C002B000650564139323920"
                        "490026000650564139323920"]]
               (execute! {::input    {::value            value
                                      ::background-color background}
                          ::dial-uid uid
                          ::api-key  api-key})))
      (Thread/sleep 1500)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(let [values [[50 [0 0 0]] 
                [8 [255 255 255]]
                [57 [255 0 0]]
                [44 [255 255 0]]
                [99 [255 255 255]]
                [1 [0 255 255]]
                [50 [0 0 255]]
                [50 [0 0 0]]]]
    (for [index (range (+ 3 (count values)))]
      (do
        (doall (for [[offset uid] (map-indexed vector
                                               ["840033000650564139323920"
                                                "400028000650564139323920"
                                                "8C002B000650564139323920"
                                                "490026000650564139323920"])]
                 (let [[value background] (get values (max (min 0 (- index offset))
                                                           (dec (count values))))]
                   (execute! {::input    {::value            value
                                          ::background-color background}
                              ::dial-uid uid
                              ::api-key  api-key}))))
        (Thread/sleep 1500))))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(let [values [[50 [0 0 0]]
                [8 [255 255 255]]
                [57 [255 0 0]]
                [44 [255 255 0]]
                [99 [255 255 255]]
                [1 [0 255 255]]
                [50 [0 0 255]]
                [50 [0 0 0]]]]
    (for [index (range (+ 3 (count values)))]
      (do
        (doall (for [[offset uid] (map-indexed vector
                                               ["840033000650564139323920"
                                                "400028000650564139323920"
                                                "8C002B000650564139323920"
                                                "490026000650564139323920"])]
                 (let [[value background] (get values
                                               (max (min 0 (- index offset))
                                                    (dec (count values))))]
                   (println value background offset)
                   #_
                     (execute! {::input    {::value            value
                                            ::background-color background}
                                ::dial-uid uid
                                ::api-key  api-key}))))
        (Thread/sleep 1500))))
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
50 [0 0 0] 0
50 [0 0 0] 1
50 [0 0 0] 2
50 [0 0 0] 3
(nil nil nil nil nil nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::input    {::value value}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(for [value [8 57 33 86 99 1]]
    (do
      (execute! {::input    {::value value}
                 ::dial-uid "840033000650564139323920"
                 ::api-key  api-key})
      (Thread/sleep 1000)))
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}
(nil nil nil nil nil nil)
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            44
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            45
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            46
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            48
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step   50
                                        :period 20}
                        }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15530]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            58
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            28
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step   50
                                        :period 10}
                        }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15530]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            28
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            98
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step   1
                                        :period 1000}
                        }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15530]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            90
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step   0.5
                                        :period 500}
                        }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15530]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
; Execution error (ExceptionInfo) at slingshot.support/stack-trace (support.clj:201).
; clj-http: status 500
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::dial-easing {:step   1
                                        :period 2000}
                        }
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15530]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/dial-easing}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
(execute! {::input    {::value            80
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
; (#:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/value}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15522]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/name}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15526]} #:dev.freeformsoftware.vu1-driver-clojure.thing{:input #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color}, :output #{}, :execute! #function[dev.freeformsoftware.vu1-driver-clojure.thing/fn--15528]}) #{:dev.freeformsoftware.vu1-driver-clojure.thing/background-color :dev.freeformsoftware.vu1-driver-clojure.thing/value :dev.freeformsoftware.vu1-driver-clojure.thing/name}
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.thing꞉> 
; Evaluating file: main.clj
nil
clj꞉dev.freeformsoftware.vu1-driver-clojure.main꞉> 
(execute! {::input    {::value            80
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.main꞉> 
(execute! {::input    {::value            40
                         ::name             "L-ref-1"
                         ::background-color [255 255 255 255]}
             ::dial-uid "840033000650564139323920"
             ::api-key  api-key})
{}
clj꞉dev.freeformsoftware.vu1-driver-clojure.main꞉> 
